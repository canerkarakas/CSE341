; *********************************************
; *  341 Programming Languages                *
; *  Fall 2019                                *
; *  Author: Caner Karakas                    *
; *********************************************

;; Caner KARAKAŞ 131044061

;; utility functions 
(load "include.lisp") ;; "c2i and "i2c"


(defun read-as-list (filename)
	; Reads a file containing one word per line and returns a list of words (each word is in turn a list of characters)."

	; Implement this function...

	(let ((f (open filename :if-does-not-exist nil)))
		(let* ((words '()) (chars '()))
            (when f
                (loop for ch = (read-char f nil)
                    while ch do
                        (cond (
                            (char= ch #\space)
                                (setf words (append words (list chars)))
                                (setf chars '())
                            )
                            ((char= ch #\newline)
                                (setf words(append words (list chars)))
                                (setf chars '())
                            )
                            (t (setf chars (append chars (list ch))))
                        )
                )
                (setf words(append words (list chars)))
                (close f)
		    )
            (return-from read-as-list words)
        )
	)
)

;; -----------------------------------------------------
;; HELPERS
;; *** PLACE YOUR HELPER FUNCTIONS BELOW ***

(defun spell-checker-0 (word dictionary)
	;you should implement this function
    (let* ((control nil) (control2 T))
        (dotimes (n (length dictionary))
            (if  (= (length word) (length (nth n dictionary)))
                (dotimes (m (length word))
                    (if (not (char= (nth m word) (nth m (nth n dictionary))))
                        (setf control2 nil)
                    )
                    (if (not (char= (nth m word) (nth m (nth n dictionary))))
                        (setf m (+ (length word) 1))
                    )
                    (if (equal control2 T)
                        (setf control T)
                        (setf control nil)
                    )
                )
            )
        )
        (return-from spell-checker-0 control)
    )
)

(defun spell-checker-1 (word)
 	;you should implement this function
)

(defun eng-alphabet-initial ()
    (let ((alphabet '()))
        (dotimes (n 26)
            (setf alphabet (append alphabet (list (i2c n))))
        )
        (return-from eng-alphabet-initial alphabet)
    )
)

;; random alphabet
(defun encoded-alphabet-initial ()
    (let* ((encoAlphabet '()))
        (dotimes (n 26)
            (setf encoAlphabet (append encoAlphabet (list #\1)))
        )
        (let* ((randomNumber))
            (dotimes (n 26)
                (setf *random-state* (make-random-state t))
                (setf randomNumber (random 26))
                (if (not (is-char-in-alphabet encoAlphabet (i2c randomNumber)))
                    (setf (nth n encoAlphabet) (i2c randomNumber))
                    (setf n (- n 1))
                )
            )
        )
        (return-from encoded-alphabet-initial encoAlphabet)
    )
)

(defun is-char-in-alphabet (alphabet ch)
	(dotimes (n 26)
		(if (char= ch (nth n alphabet))
			(return-from is-char-in-alphabet T)
		)
	)
	(return-from is-char-in-alphabet nil)
)

;; new alphabet compare old alphabets (decoder A)
(defun compare-alphabets (alphabet otherAlphabets)
	(if (null otherAlphabets)
		(return-from compare-alphabets nil)
	)
	(dotimes (n 26)
		(if (not (char= (nth n alphabet) (nth n (nth 0 otherAlphabets))))
			(return-from compare-alphabets nil)
		)
	)
	(compare-alphabets alphabet (cdr otherAlphabets))
)

;; verilen alfabeye göre decode ve encode yapmak (a icin)
(defun encodedWord-to-decodedWord (encodedWord decodedWord encoAlphabet)
	(if (null encodedWord)
		(return-from encodedWord-to-decodedWord decodedWord)
	)
	(setf decodedWord (append decodedWord (list (i2c (find-ch-index-from-alphabet encoAlphabet (nth 0 encodedWord))))))
    (encodedWord-to-decodedWord (cdr encodedWord) decodedWord encoAlphabet)
)

(defun decodedWord-to-encodedWord (decodedWord encodedWord encoAlphabet)
	(if (null decodedWord)
		(return-from decodedWord-to-encodedWord encodedWord)
	)
	(setf encodedWord (append encodedWord (list (nth (c2i (nth 0 decodedWord)) encoAlphabet))))
	(decodedWord-to-encodedWord (cdr decodedWord) encodedWord encoAlphabet)
)

;b icin
(defun encodedWord-to-decodedWord-for-gen-b (encodedWord decodedWord encoAlphabet)
	(if (null encodedWord)
		(return-from encodedWord-to-decodedWord-for-gen-b decodedWord)
	)
    (if (equal (find-ch-index-from-alphabet encoAlphabet (nth 0 encodedWord)) nil)
        (setf decodedWord (append decodedWord (list #\1)))
        (setf decodedWord (append decodedWord (list (i2c (find-ch-index-from-alphabet encoAlphabet (nth 0 encodedWord))))))
    )
    (encodedWord-to-decodedWord-for-gen-b (cdr encodedWord) decodedWord encoAlphabet)
)

(defun find-ch-index-from-alphabet (alphabet ch)
	(dotimes (n 26)
		(if (char= ch (nth n alphabet)) 
			(return-from find-ch-index-from-alphabet n)
		)
	)
)

; dictionarydeki belirli harf sayısındaki kelimeleri liste şeklinde döndürür ...
(defun returnNthList (dictionaryList countLength)
	(let ((returnList '()))
        (dotimes (n (length dictionaryList))
            (if (= (length (nth n dictionaryList)) countLength)
                (setf returnList (append returnList (list (nth n dictionaryList))))
            )
        )
        (return-from returnNthList returnList)
    )
)

; verilen alfabeyle istenile paragrafı sifreler (encode function)
(defun encoded-paragraph (decodedParagraph encodedParagraph encoAlphabet)
	(if (null decodedParagraph)
		(return-from encoded-paragraph encodedParagraph)
	)
	(setf encodedParagraph (append encodedParagraph (list (decodedWord-to-encodedWord (nth 0 decodedParagraph) '() encoAlphabet))))
	(encoded-paragraph (cdr decodedParagraph) encodedParagraph encoAlphabet)
)

; gelen paragrafta geçen harflerin ne kadar geçtiğini sırasıyla tutar
; numOfLettersCounter => harflerin sayısının sayacı
; counter => hangi harf olduğunu integer olarak tutar
(defun counter-frequent-characters (encodedParagraph numOfLettersCounter counter)
	(if (= counter 26)
		(return-from counter-frequent-characters numOfLettersCounter)
	)
    (setf numOfLettersCounter (append numOfLettersCounter (list (num-theLetter encodedParagraph (i2c counter) 0))))
    (counter-frequent-characters encodedParagraph numOfLettersCounter (+ counter 1))
)

; verilen paragraftaki istenilen harfin sayısını bulur
(defun num-theLetter (paragraph letter counter)
	(if (null paragraph)
		(return-from num-theLetter counter)
	)
	(dotimes (n (length (nth 0 paragraph)))
		(if (char= letter (nth n (nth 0 paragraph)))
			(setf counter (+ counter 1))
		)
	)
	(num-theLetter (cdr paragraph) letter counter)
)

; en cok kullanilan alti harfi bulur
(defun most-used-letters (numOfLettersCounter letters counter)
    (if (= counter 6)
        (return-from most-used-letters letters)
    )
    (setf letters (append letters (list (i2c (max-number-index numOfLettersCounter)))))
    (setf (nth (max-number-index numOfLettersCounter) numOfLettersCounter) 0)
    (most-used-letters numOfLettersCounter letters (+ counter 1))
)

; maksimum sayiyi bulur index return eder
(defun max-number-index (array)
    (let ((counter 0) (index))
        (dotimes (n (length array))
            (if (> (nth n array) counter)
                (setf index n)
            )
            (if (> (nth n array) counter)
                (setf counter (nth n array))
            )
        )
        (return-from max-number-index index)
    )
)

; en sık kullanılan harfler belirlendikten sonra oluşturulması gereken alfabenin ilk kısmı
(defun encoded-alph-Decoder-B-0-1 (mostUsedEngChars mostUsedEncodedChars encodedAlph)
    (if (and (null mostUsedEngChars) (null mostUsedEncodedChars))
        (return-from encoded-alph-Decoder-B-0-1 encodedAlph)
    )
    (setf (nth (c2i (nth 0 mostUsedEngChars)) encodedAlph) (nth 0 mostUsedEncodedChars))
    (encoded-alph-Decoder-B-0-1 (cdr mostUsedEngChars) (cdr mostUsedEncodedChars) encodedAlph)
)

; elde olan harfleri dener ve kesin olanları denemez
(defun control-function (mostUsedEngChars mostUsedEncodedChars paragraph dictionary encodedAlph trueChars)
    (if (and (null mostUsedEngChars) (null mostUsedEncodedChars))
        (return-from control-function trueChars)
    )
    (if (equal trueChars nil)
        (let* ((indexesCh (indexes-char-from-paragraph paragraph (nth 0 mostUsedEncodedChars) '() 0))
                (encodedWordToDecodedWordCount)
                (control nil)
                (succesRateForOneWordOneChar 0)
                )
            (dotimes (n (length indexesCh))
                (setf encodedWordToDecodedWordCount (encodedWord-to-decodedWord-for-gen-b (nth (nth n indexesCh) paragraph) '() encodedAlph))
                (setf succesRateForOneWordOneChar (+ succesRateForOneWordOneChar (success-rate-encoChar encodedWordToDecodedWordCount dictionary (nth 0 mostUsedEngChars) 0)))
            )
            (if (>= SuccesRateForOneWordOneChar (/ (length indexesCh) 2))
                (setf trueChars (append trueChars (list (nth 0 mostUsedEncodedChars))))
            )
            (setf SuccesRateForOneWordOneChar 0)
            (control-function (cdr mostUsedEngChars) (cdr mostUsedEncodedChars) paragraph dictionary encodedAlph trueChars)
        )
        (if (equal (member (nth 0 mostUsedEncodedChars) trueChars) nil)
            (let* ((indexesCh (indexes-char-from-paragraph paragraph (nth 0 mostUsedEncodedChars) '() 0))
                    (encodedWordToDecodedWordCount)
                    (control nil)
                    (succesRateForOneWordOneChar 0)
                    )
                (dotimes (n (length indexesCh))
                    (setf encodedWordToDecodedWordCount (encodedWord-to-decodedWord-for-gen-b (nth (nth n indexesCh) paragraph) '() encodedAlph))
                    (setf succesRateForOneWordOneChar (+ succesRateForOneWordOneChar (success-rate-encoChar encodedWordToDecodedWordCount dictionary (nth 0 mostUsedEngChars) 0)))
                )
                (if (>= SuccesRateForOneWordOneChar  (length indexesCh))
                    (setf trueChars (append trueChars (list (nth 0 mostUsedEncodedChars))))
                )
                (setf SuccesRateForOneWordOneChar 0)
                (control-function (cdr mostUsedEngChars) (cdr mostUsedEncodedChars) paragraph dictionary encodedAlph trueChars)
            )
            (control-function (cdr mostUsedEngChars) (cdr mostUsedEncodedChars) paragraph dictionary encodedAlph trueChars)
        )
    )
)

; verilen kelimenin sözlükte harf harf tutma oranı
(defun success-rate-encoChar (word dictionary ch rateForWord)
    (if (null dictionary)
        (return-from success-rate-encoChar rateForWord)
    )
    (let* ((rateForChar 0)(control nil) (indexesCh (hands-char-indexes-from-word word ch '() 0)))
        (if (= (length word) (length (nth 0 dictionary)))
            (dotimes (n (length indexesCh))
                (if (char= (nth (nth n indexesCh) (nth 0 dictionary)) (nth (nth n indexesCh) word))
                    (setf rateForChar (+ rateForChar 1))
                )
            )
            (setf control t)
        )
        (if (equal control nil)
            (if (= (/ rateForChar (length indexesCh)) 1)
                (setf rateForWord (+ rateForWord 1))
            )
        )
        (success-rate-encoChar word (cdr dictionary) ch rateForWord)
    )
)

;yeni bi kombinasyon denemek icin sıralarını degistirir
(defun new-six-chars (mostUsedEngChars mostUsedEncodedChars trueChars encoAlphabet)
    (let* ((randomNumber) (randomNumber2) (control nil))
        (dotimes (n (abs (- (length mostUsedEncodedChars) (length trueChars))))
            (setf *random-state* (make-random-state t))
            (setf randomNumber (random 6))
            (setf randomNumber2 (random 6))
            (if (or (member (nth (c2i (nth randomNumber mostUsedEngChars)) encoAlphabet) trueChars)
                        (member (nth (c2i (nth randomNumber2 mostUsedEngChars)) encoAlphabet) trueChars))
                (setf n (- n 1))
                (setf control t)
            )
            (if (equal control t)
                (rotatef (nth randomNumber mostUsedEngChars) (nth randomNumber2 mostUsedEngChars))
            )
            (setf control nil)
        )
        (return-from new-six-chars mostUsedEngChars)
    )
)

;verilen karakterin paragrafta hangi kelimelerde oldugunu bulur indexlerini döndürür
(defun indexes-char-from-paragraph (paragraph ch count index)
    (if (null paragraph)
        (return-from indexes-char-from-paragraph count)
    )
    (if (not (= 0 (count-char-num (nth 0 paragraph) ch 0)))
        (setf count (append count (list index)))
    )
    (indexes-char-from-paragraph (cdr paragraph) ch count (+ index 1))
)

;verilen karakterin istenilen kelimede ne kadar sayıda oldugunu tutar
(defun count-char-num (word ch count)
	(if (null word)
		(return-from count-char-num count)
	)
	(if (char= ch (nth 0 word))
		(setf count (+ count 1))
	)
	(count-char-num (cdr word) ch count)
)

(defun hands-char-indexes-from-word (word ch indexes count)
	(if (null word)
		(return-from hands-char-indexes-from-word indexes)
	)
	(if (char= ch (nth 0 word))
		(setf indexes(append indexes (list count)))
	)
	(hands-char-indexes-from-word (cdr word) ch indexes (setf count(+ count 1)))
)

(defun gen-decoder-b-0-encoded-alphabet (encodedAlph trueChars)
    (let* ((randomNumber))
        (dotimes (n 26)
            (setf *random-state* (make-random-state t))
            (setf randomNumber (random 26))
            (if (char= (nth n encodedAlph) #\1)
                (if (and (not (is-char-in-alphabet encodedAlph (i2c randomNumber))) (not (member (i2c randomNumber) trueChars)))
                    (setf (nth n encodedAlph) (i2c randomNumber))
                    (setf n (- n 1))
                )
            )
        )
    )
    (return-from gen-decoder-b-0-encoded-alphabet encodedAlph)
)

; B-0 brute force icin gerekli alfabe resetlemek
(defun gen-dec-b-0-encoAlp-restart (encodedAlph trueChars)
    (dotimes (n 26)
        (if (equal (member (nth n encodedAlph) trueChars) nil)
            (setf (nth n encodedAlph) #\1)
        )
    )
    (return-from gen-dec-b-0-encoAlp-restart encodedAlph)
)

; B-0 icin tanimlanmis brute force
(defun gen-decoder-b-0-BruteForce (paragraph dictionary encodedAlph trueChars);doc => paragraph
    (let* ( (decodedWord '())
            (accuracyRateS '())
            (accuracyRate 0))
        (loop
            (setf encodedAlph (gen-decoder-b-0-encoded-alphabet encodedAlph trueChars))
            (terpri)
            (print encodedAlph)
            (terpri)
            (dotimes (k (length paragraph))
                (setf decodedWord '())
                (setf decodedWord (encodedWord-to-decodedWord (nth k paragraph) decodedWord encodedAlph))
                (if (spell-checker-0 decodedWord dictionary)
                    (setf accuracyRate (+ accuracyRate 1))
                )
            )
            (terpri)
            (setf accuracyRates (append accuracyRates (list accuracyRate)))
            (terpri)
            (print (length accuracyRates))
            (terpri)
            (setf successRate (/ accuracyRate (length dictionary)))
            (print successRate)
            (terpri)
            (when (>= successRate (/ 3 6))
                (return-from gen-decoder-b-0-BruteForce encodedAlph)
            )
            (setf accuracyRate 0)
            (setf encodedAlph (gen-dec-b-0-encoAlp-restart encodedAlph trueChars))
        )
    )
)

;; b-0 control function mantigina yakin
;; harfleri random atamak yerine kelimeleri dictionary ile eslestirip harflerin dogrulugunu kontrol ederek
;; isine devam etmekte
(defun gen-decoder-b-1-control-function (paragraph dictionary encodedAlph trueChars numOfLetters)
    (let* ((control t))
        (dotimes (n (length paragraph))
            (if (= (length (nth n paragraph)) numOfLetters)
                (dotimes (m (length dictionary))
                    (if (= (length (nth m dictionary)) numOfLetters)
                        (dotimes (k numOfLetters)
                            (terpri)
                            (if (and (char= (nth (c2i (nth k (nth m dictionary))) encodedAlph) #\1))
                                (setf (nth (c2i (nth k (nth m dictionary))) encodedAlph) (nth k (nth n paragraph)))
                                (if (equal (member (nth (c2i (nth k (nth m dictionary))) encodedAlph) trueChars) nil)
                                    (setf (nth (c2i (nth k (nth m dictionary))) encodedAlph) (nth k (nth n paragraph)))
                                    (setf control nil)
                                )
                            )
                            (if (equal control t)
                                (if (= (gen-decoder-b-1-letter-to-letter paragraph dictionary encodedAlph (nth (c2i (nth k (nth n dictionary))) encodedAlph) 0) (num-theLetter-of-b-1 paragraph (nth (c2i (nth k (nth n dictionary))) encodedAlph) 0))
                                    (setf trueChars (append trueChars (list (nth (c2i (nth k (nth n dictionary))) encodedAlph))))
                                    (setf (nth (c2i (nth k (nth m dictionary))) encodedAlph) #\1)
                                )
                            )
                            (if (and (/= (letter-in-alphabet-num (nth k (nth n dictionary)) encodedAlph 0) 1) (equal control nil))
                                (setf (nth (find-wrong-index-letter (nth k (nth n dictionary)) encodedAlph 0) encodedAlph) #\1)
                                (if (equal (member (nth (c2i (nth k (nth n dictionary))) encodedAlph) trueChars) nil)
                                    (setf trueChars (append trueChars (list (nth (c2i (nth k (nth n dictionary))) encodedAlph))))
                                )
                            )
                        )
                        (setf control t)
                    )
                )
            )
        )
        (return-from gen-decoder-b-1-control-function trueChars)
    )
)


; verilen harfin alfabaede kac kere oldugunu bulur
(defun letter-in-alphabet-num (letter alphabet counter)
    (if (null alphabet)
        (return-from letter-in-alphabet-num counter)
    )
    (if (char= (nth 0 alphabet) letter)
        (letter-in-alphabet-num letter (cdr alphabet) (+ counter 1))
        (letter-in-alphabet-num letter (cdr alphabet) counter)
    )
)

;iki aynı harften biri yanlis indexteyse indexi bulmak icin
(defun find-wrong-index-letter (letter alphabet index)
    (if (and (char= (nth 0 alphabet) letter) (/= index (c2i letter)))
        (return-from find-wrong-index-letter index)
    )
    (find-wrong-index-letter letter (cdr alphabet) (+ index 1))
)

; gönderilen harfin geçtiği kelimeler decode edilip spell check yapılır. dogru kelime sayısı return edilir
(defun gen-decoder-b-1-letter-to-letter (paragraph dictionary encodedAlph countLetter accuracyRate)
    (if (null paragraph)
        (return-from gen-decoder-b-1-letter-to-letter accuracyRate)
    )
    (if (member countLetter (nth 0 paragraph))
        (if (spell-checker-0 (encodedWord-to-decodedWord-for-gen-b (nth 0 paragraph) '() encodedAlph) dictionary)
            (gen-decoder-b-1-letter-to-letter (cdr paragraph) dictionary encodedAlph countLetter (+ accuracyRate 1))
        )
        (gen-decoder-b-1-letter-to-letter (cdr paragraph) dictionary encodedAlph countLetter accuracyRate)
    )
)

; istenilen harfin verilen paragrafta kaç tane kelimede gectigiini bulur
(defun num-theLetter-of-b-1 (paragraph letter counter)
	(if (null paragraph)
		(return-from num-theLetter-of-b-1 counter)
	)
	(if (not (equal (member letter (nth 0 paragraph)) nil))
        (num-theLetter-of-b-1 (cdr paragraph) letter (+ counter 1))
        (num-theLetter-of-b-1 (cdr paragraph) letter counter)
    )
)

;; -----------------------------------------------------
;; DECODE FUNCTIONS

(defun Gen-Decoder-A (paragraph);doc => paragraph
    (let* ((encoAlphabet '())
            (encoAlphabets '())
            (decodedWord '())
            (accuracyRateS '())
            (boolForNewAlph nil)
            (accuracyRate 0)
            (dictionary (read-as-list "dictionary1.txt")))
        (print "....................................................")
        (print "------------------dictionary basladi------------------")
        (print "....................................................")
        (print dictionary)
        (loop
            (loop
                (setf encoAlphabet '())
                (setf encoAlphabet (append encoAlphabet (encoded-alphabet-initial)))
                (when  (equal (compare-alphabets encoAlphabet encoAlphabets) nil)
                    (return )
                )
            )
            (setf encoAlphabets (append encoAlphabets (list encoAlphabet)))
            (terpri)
            (print encoAlphabet)
            (terpri)
            (dotimes (k (length paragraph))
                (setf decodedWord '())
                (setf decodedWord (encodedWord-to-decodedWord (nth k paragraph) decodedWord encoAlphabet))
                (print decodedWord)
                (terpri)
                (if (spell-checker-0 decodedWord dictionary)
                    (setf accuracyRate (+ accuracyRate 1))
                )
            )
            (terpri)
            (setf accuracyRates (append accuracyRates (list accuracyRate)))
            (terpri)
            (print (length accuracyRates))
            (terpri)
            (setf successRate (/ accuracyRate (length dictionary)))
            (print successRate)
            (terpri)
            (when (>= successRate (/ 3 6)) ; basari orani degistirilebilir...
                (return-from Gen-Decoder-A encoAlphabet)
            )
            (setf accuracyRate 0)
        )
    )
)

(defun Gen-Decoder-B-0 (paragraph)
  	;you should implement this function
    (print "....................................................")
    (print "------------------dictionary basladi------------------")
    (print "....................................................")
    (terpri)
    (let* ((dictionary (read-as-list "dictionary1.txt"))
            (mostUsedEngChars '(#\e #\t #\a #\o #\i #\n))
            (mostUsedEncodedChars (most-used-letters (counter-frequent-characters paragraph '() 0) '() 0))
            (encodedAlph '(#\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1))
            )
        (setf encodedAlph (encoded-alph-Decoder-B-0-1 mostUsedEngChars mostUsedEncodedChars encodedAlph))
        (terpri)
        (let* ((trueChars (control-function mostUsedEngChars mostUsedEncodedChars paragraph dictionary encodedAlph '())))
            (if (/= (length trueChars) 6)
                (loop
                    (print trueChars)
                    (setf mostUsedEngChars (new-six-chars mostUsedEngChars mostUsedEncodedChars trueChars encodedAlph))
                    (setf encodedAlph (encoded-alph-Decoder-B-0-1 mostUsedEngChars mostUsedEncodedChars encodedAlph))
                    (setf trueChars (control-function mostUsedEngChars mostUsedEncodedChars paragraph dictionary encodedAlph trueChars))
                    (when (= (length trueChars) 3) ; basari orani 3 harf ile sinirlidir. ingilizcede ve dokumanda en sık kulanilan harflerin farki dusunulerek en yuksek ihtimal kullanilmistir...
                        (terpri)
                        (terpri)
                        (print mostUsedEngChars)
                        (terpri)
                        (print mostUsedEncodedChars)
                        (terpri)
                        (print encodedAlph)
                        (terpri)
                        (terpri)
                        (print trueChars)
                        (return trueChars)
                    )
                )
            )
            (print "start brute force")
            (gen-decoder-b-0-BruteForce paragraph dictionary encodedAlph trueChars)
            (terpri)
            (return-from Gen-Decoder-B-0 encodedAlph)
        )
    )
)

(defun Gen-Decoder-B-1 (paragraph)
  	;you should implement this function
    (print "....................................................")
    (print "------------------dictionary basladi------------------")
    (print "....................................................")
    (terpri)
    (let* ((dictionary (read-as-list "dictionary1.txt"))
            (mostUsedEngChars '(#\e #\t #\a #\o #\i #\n))
            (mostUsedEncodedChars (most-used-letters (counter-frequent-characters paragraph '() 0) '() 0))
            (encodedAlph '(#\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1 #\1))
            )
        (setf encodedAlph (encoded-alph-Decoder-B-0-1 mostUsedEngChars mostUsedEncodedChars encodedAlph))
        (terpri)
        (let* ((trueChars (control-function mostUsedEngChars mostUsedEncodedChars paragraph dictionary encodedAlph '())))
            (if (/= (length trueChars) 6)
                (loop
                    (print trueChars)
                    (setf mostUsedEngChars (new-six-chars mostUsedEngChars mostUsedEncodedChars trueChars encodedAlph))
                    (setf encodedAlph (encoded-alph-Decoder-B-0-1 mostUsedEngChars mostUsedEncodedChars encodedAlph))
                    (setf trueChars (control-function mostUsedEngChars mostUsedEncodedChars paragraph dictionary encodedAlph trueChars))
                    (when (= (length trueChars) 3); basari orani 3 harf ile sinirlidir. ingilizcede ve dokumanda en sık kulanilan harflerin farki dusunulerek en yuksek ihtimal kullanilmistir...
                        (terpri)
                        (terpri)
                        (print mostUsedEngChars)
                        (terpri)
                        (print mostUsedEncodedChars)
                        (terpri)
                        (print encodedAlph)
                        (terpri)
                        (terpri)
                        (print trueChars)
                        (return trueChars)
                    )
                )
            )
            (print "--------------PART2--------------")
            (let* ((numOfLetters 1))
                (loop
                    (setf trueChars (gen-decoder-b-1-control-function paragraph dictionary encodedAlph trueChars numOfLetters))
                    (setf numOfLetters (+ numOfLetters 1))
                    (when (= numOfLetters 3)
                        (terpri)
                        (terpri)
                        (print encodedAlph)
                        (terpri)
                        (terpri)
                        (print trueChars)
                        (return trueChars)
                    )
                )
            )
            (terpri)
            (print "start brute force")
            (gen-decoder-b-0-BruteForce paragraph dictionary encodedAlph trueChars)
            (terpri)
            (return-from Gen-Decoder-B-1 encodedAlph)
        )
    )
)

(defun Code-Breaker (document decoder)
  	;you should implement this function
    (print decoder)
    (return-from Code-Breaker decoder)
)
;; -----------------------------------------------------
;; Test code...

(defun test_on_test_data ()
	(print "....................................................")
	(print "Testing ....")
	(print "....................................................")
	(terpri)
	(terpri)
	(let ((doc (read-as-list "document1.txt")))
        (let* ((encodedAlph (encoded-alphabet-initial))
            (encodedParagraph (encoded-paragraph doc '() encodedAlph)))
            ;; (Gen-Decoder-A (encoded-paragraph doc '() (encoded-alphabet-initial)))
            ;; (print (counter-frequent-characters doc '() 0))
            ;; (terpri)
            ;; (print (most-used-letters (counter-frequent-characters doc '() 0) '() 0))
            ;; (terpri)
            ;; (print (Gen-Decoder-B-0 (encoded-paragraph doc '() (encoded-alphabet-initial))))
            ;; (print encodedAlph)
            ;; (terpri)
            ;; (print encodedParagraph)
            ;; (Code-Breaker encodedParagraph (Gen-Decoder-B-0 encodedParagraph))
            (Code-Breaker doc (Gen-Decoder-B-1 doc))
        )
	)
)

;; test code...
(test_on_test_data)