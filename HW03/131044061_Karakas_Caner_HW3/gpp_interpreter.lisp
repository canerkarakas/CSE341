(setq operators '())
(setq operators (append operators (list (code-char 43.))))
(setq operators (append operators (list (code-char 45.))))
(setq operators (append operators (list (code-char 47.))))
(setq operators (append operators (list (code-char 42.))))
(setq operators (append operators (list (code-char 40.))))
(setq operators (append operators (list (code-char 41.))))
(setq operators (append operators (list (code-char 34.))))
(setq operators (append operators (list (code-char 34.))))
(setq operators (append operators (list (code-char 44.))))

(setf keywords '((#\a #\n #\d) (#\o #\r) (#\n #\o #\t) (#\e #\q #\u #\a #\l)
               (#\l #\e #\s #\s) (#\n #\i #\l) (#\l #\i #\s #\t)
               (#\a #\p #\p #\e #\n #\d) (#\c #\o #\n #\c #\a #\t)
               (#\s #\e #\t) (#\d #\e #\f #\f #\u #\n) (#\f #\o #\r)
               (#\i #\f) (#\l #\o #\a #\d)
               (#\t #\r #\u #\e) (#\f #\a #\l #\s #\e) (#\w #\h #\i #\l #\e)))

(setf booleanOperatorKey '((#\a #\n #\d) (#\o #\r) (#\n #\o #\t) (#\e #\q #\u #\a #\l)
                        (#\l #\e #\s #\s) (#\t #\r #\u #\e) (#\f #\a #\l #\s #\e) (#\n #\i #\l)))

(setf controlOperatorKey '((#\i #\f) (#\w #\h #\i #\l #\e) (#\f #\o #\r)))

(setf listOperatorKey '((#\l #\i #\s #\t) (#\a #\p #\p #\e #\n #\d) (#\c #\o #\n #\c #\a #\t)))

(setq integers '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))

(setq alphabet '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\r #\s #\t #\u #\v #\w #\x #\y #\z))

;defun identifiers ve fonksiyon isimleri icin gerekliler
(setq funcNames '()) ;tanimlanan fonksiyon isimlerini tutar
(setq funcId '()) ;fonksiyon icin tanimlanan ve func call yaparken istenilen degiskenleri tutar. buna gerek olmayabilir
(setq funcIdVal '()) ;fonksiyon icin tanimlanan ve func call yaparken istenilen degiskenlerin degerlerini tutar

(setq inputLine '())
(setq tempStack '())
(setq syntaxError nil)

(setq closePNumber 0)

(load "gpp_lexer.lisp")

;bosluk gorene kadar ilerler (kapali parantez gelirse bosluktan once yine durur. bu durum list icin kullanilmistir)
(defun goSpace (line)
   (if (and (not (equal (nth 0 line) #\Space)) (not (equal (nth 0 line) (code-char 41.))))
      (goSpace (cdr line))
      line
   )
)

;kelimenin listede olup olmadigini kontrol eder
(defun inTheList (word list)
   (let ((control))
      (dotimes (n (length list))
         (setf control T)
         (if (equal (length word) (length (nth n list)))
            (progn
               (dotimes (m (length word))
                  (if (not (equal (nth m word) (nth m (nth n list))))
                     (progn
                        (setf control nil)
                        (setf m (+ m (length word)))
                     )
                  )
               )
               (if (equal control T)
                  (return-from inTheList control)
               )
            )
         )
         (setf control nil)
      )
      (return-from inTheList control)
   )
)

;verilen keyin verilen listedeki indexi bulunur
(defun findIndex (word keyList)
   (let ((control))
      (dotimes (n (length keyList))
         (setf control T)
         (if (equal (length word) (length (nth n keyList)))
            (progn
               (dotimes (m (length word))
                  (if (not (equal (nth m word) (nth m (nth n keyList))))
                     (progn
                        (setf control nil)
                        (setf m (+ m (length word)))
                     )
                  )
               )
               (if (equal control T)
                  (return-from findIndex n)
               )
            )
         )
         (setf control nil)
      )
   )
)

;tam olarak degil kullanmadan kontrol et
(defun toList (line index result)
   (if (or (equal (nth index line) #\Space) (equal (nth index line) (code-char 41.)) (equal (nth index line) nil))
      (return-from toList result)
   )
   (setf result (append result (list (nth index line))))
   (toList line (+ index 1) result)
)

;double sayilar icin de yapabilir
(defun toListForIntegers (line index result)
   (if (or (equal (nth index line) #\Space) (equal (nth index line) nil))
      (return-from toListForIntegers result)
   )
   (if (and (equal (member (nth index line) integers) nil) (char/= (nth index line) #\,))
      (return-from toListForIntegers result)
   )
   (if (equal (nth index line) (code-char 41.))
      (return-from toListForIntegers result)
   )
   (setf result (append result (list (nth index line))))
   (toListForIntegers line (+ index 1) result)
)

;integer listeyi integer sayiya cevirme, AYRICA sinav sorusu....
(defun integerListToInteger (integerList result)
   (if (/= 0 (length integerList))
      (progn
         (setf result (+ result (* (- (char-int (nth 0 integerList)) 48) (expt 10 (- (length integerList) 1)))))
         (setf result (+ result (integerListToInteger (cdr integerList) 0)))
      )
   )
   result
)

;stringi bir char listesine dondurur
(defun stringToCharList (str tempList n)
   (if (= n (length str))
      tempList
      (progn
         (setf tempList (append tempList (list (char str  n))))
         (stringToCharList str tempList (+ 1 n))
      )
   )
)

;ilk kapama parantezine kadar gider
(defun goClosedParentheses (line)
   (if (char= (nth 0 line) (code-char 41.))
      line
      (goClosedParentheses (cdr line))
   )
)

;verilen karakterin kac tane oldugunu bulur
(defun findCharNumber (line ch result)
    (if (not (null line))
        (progn
            (if (char= (nth 0 line) ch)
                (setf result (+ result 1))
            )
            (findCharNumber (cdr line) ch result)
        )
        result
    )
)

;parantez sayilari birbirine esit mi kontrol eder
(defun controlSyntaxForParanthesis (line)
    (if (= (findCharNumber line (code-char 41.) 0) (findCharNumber line (code-char 40.) 0))
        t
        nil
    )
)

;ilk liste ile ikinci listeyi istenilen eleman sayisi kadar karsilastirir
(defun isEqualWithIndex (list1 list2 index)
    (if (= index 0)
        t
        (progn
            (if (not (equal (nth 0 list1) (nth 0 list2)))
                nil
                (isEqualWithIndex (cdr list1) (cdr list2) (- index 1))
            )
        )
    )
)

;---------OPERATORS---------
(defun operatorPlus (input returnValue)
    (if (not (equal (member (nth 0 input) integers) nil))
        (progn
            (let ((integer1 (toListForIntegers input 0 '()))
                (integer2 (toListForIntegers input (+ 1  (length (toListForIntegers input 0 '()))) '())))
                (if (or (equal integer1 nil) (equal integer2 nil))
                    (setf syntaxError t)
                )
                (if (char= (code-char 41.) (nth (+ 1 (+ (length integer1) (length integer2))) input))
                    (setf returnValue (+ (integerListToInteger integer1 0) (integerListToInteger integer2 0)))
                    (setf syntaxError t)
                )
                returnValue
            )
        )
        (progn
            (if (not (equal (member (nth 0 input) alphabet) nil))
                (progn
                    (let ((word (toList input 0 '())))
                        (if (inTheList word funcId)
                            (print "funcID")
                            (setf syntaxError t)
                        )
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun operatorMinus (input returnValue)
    (if (not (equal (member (nth 0 input) integers) nil))
        (progn
            (let ((integer1 (toListForIntegers input 0 '()))
                (integer2 (toListForIntegers input (+ 1  (length (toListForIntegers input 0 '()))) '())))
                (if (or (equal integer1 nil) (equal integer2 nil))
                    (setf syntaxError t)
                )
                (if (char= (code-char 41.) (nth (+ 1 (+ (length integer1) (length integer2))) input))
                    (setf returnValue (- (integerListToInteger integer1 0) (integerListToInteger integer2 0)))
                    (setf syntaxError t)
                )
                returnValue
            )
        )
        (progn
            (if (not (equal (member (nth 0 input) alphabet) nil))
                (progn
                    (let ((word (toList input 0 '())))
                        (if (inTheList word funcId)
                            (print "funcID")
                            (setf syntaxError t)
                        )
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun operatorDiv (input returnValue)
    (if (not (equal (member (nth 0 input) integers) nil))
        (progn
            (let ((integer1 (toListForIntegers input 0 '()))
                (integer2 (toListForIntegers input (+ 1  (length (toListForIntegers input 0 '()))) '())))
                (if (or (equal integer1 nil) (equal integer2 nil))
                    (setf syntaxError t)
                )
                (if (char= (code-char 41.) (nth (+ 1 (+ (length integer1) (length integer2))) input))
                    (setf returnValue (/ (integerListToInteger integer1 0) (integerListToInteger integer2 0)))
                    (setf syntaxError t)
                )
                returnValue
            )
        )
        (progn
            (if (not (equal (member (nth 0 input) alphabet) nil))
                (progn
                    (let ((word (toList input 0 '())))
                        (if (inTheList word funcId)
                            (print "funcID")
                            (setf syntaxError t)
                        )
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun operatorDeMult (input returnValue)
    (if (not (equal (member (nth 0 input) integers) nil))
        (progn
            (let ((integer1 (toListForIntegers input 0 '())))
                (if (char= (code-char 41.) (nth (+ 1 (length integer1)) input))
                    (setf returnValue (* (integerListToInteger integer1 0) (integerListToInteger integer1 0)))
                    (setf syntaxError t)
                )
                returnValue
            )
        )
        (progn
            (if (not (equal (member (nth 0 input) alphabet) nil))
                (progn
                    (let ((word (toList input 0 '())))
                        (if (inTheList word funcId)
                            (print "funcID")
                            (setf syntaxError t)
                        )
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun operatorMult (input returnValue)
    (if (not (equal (member (nth 0 input) integers) nil))
        (progn
            (let ((integer1 (toListForIntegers input 0 '()))
                (integer2 (toListForIntegers input (+ 1  (length (toListForIntegers input 0 '()))) '())))
                (if (or (equal integer1 nil) (equal integer2 nil))
                    (setf syntaxError t)
                )
                (if (char= (code-char 41.) (nth (+ 1 (+ (length integer1) (length integer2))) input))
                    (setf returnValue (* (integerListToInteger integer1 0) (integerListToInteger integer2 0)))
                    (setf syntaxError t)
                )
                returnValue
            )
        )
        (progn
            (if (not (equal (member (nth 0 input) alphabet) nil))
                (progn
                    (let ((word (toList input 0 '())))
                        (if (inTheList word funcId)
                            (print "funcID")
                            (setf syntaxError t)
                        )
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun operatorsCalculator (input returnValue)
    (if (char= (nth 0 input) #\+)
        (setf returnValue (operatorPlus  (cdr (cdr input)) returnValue))
        (progn
            (if (char= (nth 0 input) #\-)
                (setf returnValue (operatorMinus (cdr (cdr input)) returnValue))
                (progn
                    (if (char= (nth 0 input) #\/)
                    (setf returnValue (operatorDiv (cdr (cdr input)) returnValue))
                    (progn
                        (if (char= (nth 0 input) (code-char 42.))
                            (progn
                                (if (char= (nth 1 input) (code-char 42.))
                                (setf returnValue (operatorDeMult (cdr (cdr (cdr input))) returnValue))
                                (setf returnValue (operatorMult (cdr (cdr input)) returnValue))
                                )
                            )
                            (progn
                                (setf syntaxError t)
                            )
                        )
                    )
                    )
                )
            )
        )
    )
   returnValue
)

(defun parserOperators (input returnValue)
    (if (char/= (nth 0 input) (code-char 40.))
        (progn
            (setf tempStack (append tempStack (list (nth 0 input))))
            (setf returnValue (parserOperators (cdr input) returnValue))
        )
        (progn
            (let ((expressionReturn))
                (setf tempStack (reverse tempStack))
                (if (not (equal (member (nth 0 tempStack) operators) nil))
                    (progn
                        (setf returnValue (operatorsCalculator tempStack returnValue))
                        (setf expressionReturn (write-to-string returnValue))
                        (setf expressionReturn (stringToCharList expressionReturn '() 0))
                        (setf tempStack (goClosedParentheses tempStack))
                        (setf tempStack (cdr tempStack))
                        (if (null (cdr input))
                            returnValue
                            (progn
                                (setf input (cdr input))
                                (if (equal #\Space (nth 0 input))
                                    (setf input (reverse input))
                                    (progn
                                        (setf input (reverse input))
                                        (setf input (append input (list #\Space)))
                                    )
                                )
                                (setf input (append input expressionReturn))
                                (setf input (append input tempStack))
                                (setf tempStack '())
                                (setf input (reverse input))
                                (setf returnValue (parserOperators input returnValue))
                            )
                        )
                    )
                    (setf syntaxError t)
                )
            )

        )
    )
)

;---------BOOLEANS---------
(defun trueFalseNil (word)
    (if (= (findIndex word booleanOperatorKey) 5)
        t
        nil
    )
)

(defun keywordAND (input returnValue)
    (if (not (equal (member (nth 0 input) alphabet) nil))
        (progn
            (let ((booleanExp1 (toList input 0 '()))
                (booleanExp2 (toList input (+ 1  (length (toList input 0 '()))) '()))
                (ExpValue1) (ExpValue2))
                (if (or (equal booleanExp1 nil) (equal booleanExp2 nil))
                    (setf syntaxError t)
                    (progn
                        (if (char= (code-char 41.) (nth (+ 1 (+ (length booleanExp1) (length booleanExp2))) input))
                            (progn
                                (if (inTheList booleanExp1 booleanOperatorKey)
                                    (setf ExpValue1 (trueFalseNil booleanExp1))
                                    (progn
                                        (if (inTheList booleanExp1 funcId)
                                            (print "funcID")
                                            (setf syntaxError t)
                                        )
                                        (return)
                                    )
                                )
                                (if (inTheList booleanExp2 booleanOperatorKey)
                                    (setf ExpValue2 (trueFalseNil booleanExp2))
                                    (progn
                                        (if (inTheList booleanExp2 funcId)
                                            (print "funcID")
                                            (setf syntaxError t)
                                        )
                                        (return)
                                    )
                                )
                                (if (and ExpValue1 ExpValue2)
                                    (setf returnValue "true")
                                    (setf returnValue "false")
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
                returnValue
            )
        )
        (setf syntaxError t)
    )
)

(defun keywordOR (input returnValue)
    (if (not (equal (member (nth 0 input) alphabet) nil))
        (progn
            (let ((booleanExp1 (toList input 0 '()))
                (booleanExp2 (toList input (+ 1  (length (toList input 0 '()))) '()))
                (ExpValue1) (ExpValue2))
                (if (or (equal booleanExp1 nil) (equal booleanExp2 nil))
                    (setf syntaxError t)
                    (progn
                        (if (char= (code-char 41.) (nth (+ 1 (+ (length booleanExp1) (length booleanExp2))) input))
                            (progn
                                (if (inTheList booleanExp1 booleanOperatorKey)
                                    (setf ExpValue1 (trueFalseNil booleanExp1))
                                    (progn
                                        (if (inTheList booleanExp1 funcId)
                                            (print "funcID")
                                            (setf syntaxError t)
                                        )
                                        (return)
                                    )
                                )
                                (if (inTheList booleanExp2 booleanOperatorKey)
                                    (setf ExpValue2 (trueFalseNil booleanExp2))
                                    (progn
                                        (if (inTheList booleanExp2 funcId)
                                            (print "funcID")
                                            (setf syntaxError t)
                                        )
                                        (return)
                                    )
                                )
                                (if (or ExpValue1 ExpValue2)
                                    (setf returnValue "true")
                                    (setf returnValue "false")
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
                returnValue
            )
        )
        (setf syntaxError t)
    )
)

(defun keywordNOT (input returnValue)
    (if (not (equal (member (nth 0 input) alphabet) nil))
        (progn
            (let ((booleanExp1 (toList input 0 '())) (ExpValue1))
                (if (equal (code-char 41.) (nth (length booleanExp1) input))
                    (progn
                        (if (inTheList booleanExp1 booleanOperatorKey)
                            (setf ExpValue1 (trueFalseNil booleanExp1))
                            (progn
                                (if (inTheList booleanExp1 funcId)
                                    (print "funcID")
                                    (setf syntaxError t)
                                )
                                (return)
                            )
                        )
                        (if (not ExpValue1)
                            (setf returnValue "true")
                            (setf returnValue "false")
                        )
                    )
                    (progn
                        (if (equal nil (nth (length booleanExp1) input))
                            (progn
                                (if (inTheList booleanExp1 booleanOperatorKey)
                                    (setf ExpValue1 (trueFalseNil booleanExp1))
                                    (progn
                                        (if (inTheList booleanExp1 funcId)
                                            (print "funcID")
                                            (setf syntaxError t)
                                        )
                                        (return)
                                    )
                                )
                                (if (not ExpValue1)
                                    (setf returnValue "true")
                                    (setf returnValue "false")
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
                returnValue
            )
        )
        (setf syntaxError t)
    )
)

(defun keywordEQUAL (input returnValue)
    (if (not (equal (member (nth 0 input) alphabet) nil))
        (progn
            (let ((word (toList input 0 '())))
                (if (inTheList word booleanOperatorKey)
                    (progn
                        (if (or (= (findIndex word booleanOperatorKey) 5)
                                (= (findIndex word booleanOperatorKey) 6)
                                (= (findIndex word booleanOperatorKey) 7))
                            (progn
                                (if (not (equal (member (nth (+ 1 (length word)) input) alphabet) nil))
                                    (progn
                                        (let ((word2 (toList input (+ 1 (length word)) '())))
                                            (if (inTheList word2 booleanOperatorKey)
                                                (progn
                                                    (let ((ExpValue1 (trueFalseNil word)) (ExpValue2 (trueFalseNil word2)))
                                                        (if (equal ExpValue1 ExpValue2)
                                                            (setf returnValue "true")
                                                            (setf returnValue "false")
                                                        )
                                                    )
                                                )
                                                (setf syntaxError t)
                                            )
                                        )
                                    )
                                    (setf returnValue "false")
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                    (progn
                        (if (inTheList word funcId)
                            (progn 
                                (print "funcID")
                            )
                            (setf syntaxError t)
                        )
                    )
                )
            )
        )
        (if (not (equal (member (nth 0 input) integers) nil))
            (progn
                (let ((integer1 (toList input 0 '())) (integer2))
                    (if (not (equal (member (nth (+ 1 (length integer1)) input) integers) nil))
                        (progn
                            (setf integer2 (toList input (+ 1(length integer1)) '()))
                            (if (or (equal integer1 nil) (equal integer2 nil))
                                (setf syntaxError t)
                            )
                            (if (equal (integerListToInteger integer1 0) (integerListToInteger integer2 0))
                                (setf returnValue "true")
                                (setf returnValue "false")
                            )
                        )
                        (setf syntaxError t)
                    )
                )
            )
            (setf syntaxError t)
        )
    )
)

(defun keywordLESS (input returnValue)
    (if (not (equal (member (nth 0 input) integers) nil))
        (progn
            (let ((integer1 (toList input 0 '())) (integer2))
                (if (not (equal (member (nth (+ 1 (length integer1)) input) integers) nil))
                    (progn
                        (setf integer2 (toList input (+ 1 (length integer1)) '()))
                        (if (< (integerListToInteger integer1 0) (integerListToInteger integer2 0))
                            (setf returnValue "true")
                            (setf returnValue "false")
                        )
                    )
                    (setf syntaxError t)
                )
            )
        )
        (setf syntaxError t)
    )
    returnValue
)

(defun booleanOperators (input word returnValue)
    (if (= (findIndex word booleanOperatorKey) 0)
        (progn
            (setf input (goSpace input))
            (setf returnValue (keywordAND (cdr input) returnValue))
        )
        (progn
            (if (= (findIndex word booleanOperatorKey) 1)
                (progn
                    (setf input (goSpace input))
                    (setf returnValue (keywordOR (cdr input) returnValue))
                )
                (progn
                    (if (= (findIndex word booleanOperatorKey) 2)
                        (progn
                            (setf input (goSpace input))
                            (setf returnValue (keywordNOT (cdr input) returnValue))
                        )
                        (progn
                            (if (= (findIndex word booleanOperatorKey) 3)
                                (progn
                                    (setf input (goSpace input))
                                    (setf returnValue (keywordEQUAL (cdr input) returnValue))
                                )
                                (progn
                                    (if (= (findIndex word booleanOperatorKey) 4)
                                        (progn
                                            (setf input (goSpace input))
                                            (setf returnValue (keywordLESS (cdr input) returnValue))
                                        )
                                        (progn
                                            (if (= (findIndex word booleanOperatorKey) 5)
                                                (setf returnValue "true")
                                                (progn
                                                    (if (or (= (findIndex word booleanOperatorKey) 6)
                                                            (= (findIndex word booleanOperatorKey) 7))
                                                        (setf returnValue "false")
                                                        (setf syntaxError t)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(defun parserBoolean (input returnValue)
    (if (char/= (nth 0 input) (code-char 40.))
        (progn
            (setf tempStack (append tempStack (list (nth 0 input))))
            (setf returnValue (parserBoolean (cdr input) returnValue))
        )
        (progn
            (let ((expressionReturn))
                (setf tempStack (reverse tempStack))
                (if (not (equal (member (nth 0 tempStack) alphabet) nil))
                    (progn
                        (let ((word (toList tempStack 0 '())))
                            (if (inTheList word booleanOperatorKey)
                                (progn
                                    (setf returnValue (booleanOperators tempStack word returnValue))
                                    (setf expressionReturn (stringToCharList returnValue '() 0))
                                    (setf tempStack (goClosedParentheses tempStack))
                                    (setf tempStack (cdr tempStack))
                                    (if (null (cdr input))
                                        returnValue
                                        (progn
                                            (setf input (cdr input))
                                            (if (equal #\Space (nth 0 input))
                                                (setf input (reverse input))
                                                (progn
                                                    (setf input (reverse input))
                                                    (setf input (append input (list #\Space)))
                                                )
                                            )
                                            (setf input (append input expressionReturn))
                                            (setf input (append input tempStack))
                                            (setf tempStack '())
                                            (setf input (reverse input))
                                            (setf returnValue (parserBoolean input returnValue))
                                        )
                                    )
                                )
                                (progn
                                    (if (inTheList word funcNames)
                                        (print "func")
                                        (setf syntaxError t)
                                    )
                                )
                            )
                        )
                    )
                    (setf syntaxError t)
                )
            )
        )
    )
)

;---------CONTROL_OPERATORS---------
(defun keywordIf (input returnValue countForIf expression1 expression2)
    (if (not (null input))
        (progn
            (let ((wordIf (toList input 0 '())) (wordBOOL '()))
                (setf input (goSpace input))
                (setf wordBOOL (toList (cdr input) 0 '()))
                (setf returnValue (booleanOperators input wordBOOL returnValue))
                (if (null expression2)
                    (progn
                        (if (string= "true" returnValue)
                            (setf returnValue expression1)
                            returnValue
                        )
                    )
                    (progn
                        (if (string= "true" returnValue)
                            (setf returnValue expression2)
                            (setf returnValue expression1)
                        )
                    )
                )
            )
        )
        (setf syntaxError t)
    )
)

(defun keywordWhen (input returnValue)

)

(defun keywordFor (input returnValue)

)

(defun controlOperators (input word returnValue countForIf expression1 expression2)
    (if (= (findIndex word controlOperatorKey) 0)
        (progn 
            (setf input (goSpace (cdr input)))
            (setf returnValue (keywordIf (cdr input) returnValue countForIf expression1 expression2))
        )
        (progn 
            (if (= (findIndex word controlOperatorKey) 1)
                (progn
                    (setf input (goSpace (cdr input)))
                    (setf returnValue (keywordWhen (cdr input) returnValue))
                )
                (progn 
                    (if (= (findIndex word controlOperatorKey) 2)
                        (progn
                            (setf input (goSpace (cdr input)))
                            (setf returnValue (keywordFOR (cdr input) returnValue))
                        )
                        (setf syntaxError t)
                    )
                )
            )
        )
    )
)

(defun parserControl (input returnValue countForIf expression1 expression2)
    (if (char/= (nth 0 input) (code-char 40.))
        (progn
            (setf tempStack (append tempStack (list (nth 0 input))))
            (setf returnValue (parserControl (cdr input) returnValue countForIf expression1 expression2))
        )
        (progn
            (if (and (not (equal (nth 1 input) nil)) (char= (nth 1 input) #\'))
                (progn
                    (setf input (cdr input))
                    (setf input (cdr input))
                    (let ((expressionReturn))
                        (setf tempStack (reverse tempStack))
                        (setf returnValue (operatorList tempStack '()))
                        (setf countForIf (+ 1 countForIf))
                        (if (= countForIf 1)
                            (setf expression1 returnValue)
                            (progn
                                (if (= countForIf 2)
                                    (setf expression2 returnValue)
                                    (setf syntaxError t)
                                )
                            )
                        )
                        (setf tempStack (goClosedParentheses tempStack))
                        (setf tempStack (cdr tempStack))
                        (if (equal #\Space (nth 0 input))
                            (setf input (reverse input))
                            (progn
                                (setf input (reverse input))
                                (setf input (append input (list #\Space)))
                            )
                        )
                        (setf input (append input tempStack))
                        (setf tempStack '())
                        (setf input (reverse input))
                        (parserControl input returnValue countForIf expression1 expression2)
                    )
                )
                (progn
                    (let ((expressionReturn))
                        (setf tempStack (reverse tempStack))
                        (if (not (equal (member (nth 0 tempStack) alphabet) nil))
                            (progn
                                (let ((word (toList tempStack 0 '())))
                                    (if (inTheList word booleanOperatorKey)
                                        (progn
                                            (setf returnValue (booleanOperators tempStack word returnValue))
                                            (setf expressionReturn (stringToCharList returnValue '() 0))
                                            (setf tempStack (goClosedParentheses tempStack))
                                            (setf tempStack (cdr tempStack))
                                            (if (null (cdr input))
                                                returnValue
                                                (progn
                                                    (setf input (cdr input))
                                                    (if (equal #\Space (nth 0 input))
                                                        (setf input (reverse input))
                                                        (progn
                                                            (setf input (reverse input))
                                                            (setf input (append input (list #\Space)))
                                                        )
                                                    )
                                                    (setf input (append input expressionReturn))
                                                    (setf input (append input tempStack))
                                                    (setf tempStack '())
                                                    (setf input (reverse input))
                                                    (setf returnValue (parserControl input returnValue countForIf expression1 expression2))
                                                )
                                            )
                                        )
                                        (progn
                                            (if (inTheList word listOperatorKey)
                                                (progn
                                                    ;(setf tempStack (reverse tempStack))
                                                    (setf returnValue (listOperators tempStack word '() 0))
                                                    (setf countForIf (+ 1 countForIf))
                                                    (if (= countForIf 1)
                                                        (setf expression1 returnValue)
                                                        (progn
                                                            (if (= countForIf 2)
                                                                (setf expression2 returnValue)
                                                                (setf syntaxError t)
                                                            )
                                                        )
                                                    )
                                                    (setf tempStack (goClosedParentheses tempStack))
                                                    (setf input (cdr input))
                                                    (if (equal #\Space (nth 0 input))
                                                        (setf input (reverse input))
                                                        (progn
                                                            (setf input (reverse input))
                                                            (setf input (append input (list #\Space)))
                                                        )
                                                    )
                                                    (setf input (append input tempStack))
                                                    (setf tempStack '())
                                                    (setf input (reverse input))
                                                    (parserControl input returnValue countForIf expression1 expression2)
                                                )
                                                (progn
                                                    (if (inTheList word controlOperatorKey)
                                                        (setf returnValue (keywordIf tempStack returnValue countForIf expression1 expression2))
                                                        (setf syntaxError t)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
            )
        )
    )
)

;---------LIST---------
(defun keywordLIST (input returnValue)
    (if (char/= (code-char 41.) (nth 0 input))
        (progn
            (if (not (equal (member (nth 0 input) integers) nil))
                (progn
                    (let ((integer1 (toListForIntegers input 0 '())))
                        (setf returnValue (append (list (integerListToInteger integer1 0)) returnValue))
                        (if (char= #\Space (nth (length integer1) input))
                            (progn
                                (setf input (goSpace input))
                                (setf returnValue (keywordLIST (cdr input) returnValue))
                            )
                            (progn
                                (if (char= (code-char 41.) (nth (length integer1) input))
                                    returnValue
                                    (setf returnValue (keywordLIST (cdr input) returnValue))
                                )
                            )
                        )
                    )
                )
                (progn
                    (if (char= #\Space (nth 0 input))
                        (setf returnValue (keywordLIST (cdr input) returnValue))
                        (setf syntaxError t)
                    )
                )
            )
        )
        returnValue
    )
)

(defun operatorList (input returnValue)
    (if (char/= (code-char 41.) (nth 0 input))
        (progn
            (if (not (equal (member (nth 0 input) integers) nil))
                (progn
                    (let ((integer1 (toListForIntegers input 0 '())))
                        (setf returnValue (append returnValue (list (integerListToInteger integer1 0))))
                        (if (char= #\Space (nth (length integer1) input))
                            (progn
                                (setf input (goSpace input))
                                (setf returnValue (operatorList (cdr input) returnValue))
                            )
                            (progn
                                (if (char= (code-char 41.) (nth (length integer1) input))
                                    returnValue
                                    (setf returnValue (operatorList (cdr input) returnValue))
                                )
                            )
                        )
                    )
                )
                (progn
                    (if (char= #\Space (nth 0 input))
                        (setf returnValue (operatorList (cdr input) returnValue))
                        (setf syntaxError t)
                    )
                )
            )
            returnValue
        )
        returnValue
    )
)

(defun keywordAPPEND (returnValue expNumber)
    (if (<= expNumber 0)
        returnValue
        (setf syntaxError t)
    )
)

(defun keywordCONCAT (input returnValue expNumber)
    (if (<= expNumber 0)
        returnValue
        (setf syntaxError t)
    )
)

(defun listOperators (input word returnValue expNumber)
    (if (= (findIndex word listOperatorKey) 0)
        (progn 
            (setf input (goSpace (cdr input)))
            (setf returnValue (keywordLIST (cdr input) returnValue))
        )
        (progn 
            (if (= (findIndex word listOperatorKey) 1)
                (setf returnValue (keywordAPPEND returnValue expNumber))
                (progn 
                    (if (= (findIndex word listOperatorKey) 2)
                        (progn
                            (setf input (goSpace (cdr input)))
                            (setf returnValue (keywordCONCAT (cdr input) returnValue expNumber))
                        )
                        (setf syntaxError t)
                    )
                )
            )
        )
    )
)

(defun parserList (input returnValue expNumber)
    (if (char/= (nth 0 input) (code-char 40.))
        (progn
            (setf tempStack (append tempStack (list (nth 0 input))))
            (parserList (cdr input) returnValue expNumber)
        )
        (progn
            (if (and (not (equal (nth 1 input) nil))(char= (nth 1 input) #\'))
                (progn
                    (setf input (cdr input))
                    (setf input (cdr input))
                    (let ((expressionReturn))
                        (setf input (append input (list (code-char 40.))))
                        (setf tempStack (reverse tempStack))
                        (setf returnValue (append (operatorList tempStack '()) returnValue))
                        (setf tempStack (goClosedParentheses tempStack))
                        (setf tempStack (cdr tempStack))
                        (if (equal #\Space (nth 0 input))
                            (setf input (reverse input))
                            (progn
                                (setf input (reverse input))
                                (setf input (append input (list #\Space)))
                            )
                        )
                        (setf input (append input tempStack))
                        (setf tempStack '())
                        (setf input (reverse input))
                        (parserList input returnValue (- expNumber 1))
                    )
                )
                (progn
                    (let ((expressionReturn))
                        (setf tempStack (reverse tempStack))
                        (if (not (equal (member (nth 0 tempStack) alphabet) nil))
                            (progn
                                (let ((word (toList tempStack 0 '())))
                                    (if (inTheList word listOperatorKey)
                                        (progn
                                            (if (= (findIndex word listOperatorKey) 0)
                                                (progn
                                                    (setf returnValue  (listOperators tempStack word returnValue 0))
                                                    (setf expNumber (- expNumber 1))
                                                )
                                                (progn
                                                    (setf returnValue (listOperators tempStack word returnValue expNumber))
                                                    (setf expNumber (+ 1 expNumber))
                                                )
                                            )
                                            ;(setf expressionReturn returnValue)
                                            (setf tempStack (goClosedParentheses tempStack))
                                            (setf tempStack (cdr tempStack))
                                            (if (or (null (cdr input)) (char= (nth 0 (cdr input)) (code-char 40.)))
                                                returnValue
                                                (progn
                                                    (setf input (cdr input))
                                                    (if (equal #\Space (nth 0 input))
                                                        (setf input (reverse input))
                                                        (progn
                                                            (setf input (reverse input))
                                                            (setf input (append input (list #\Space)))
                                                        )
                                                    )
                                                    ;(setf input (append input expressionReturn))
                                                    (setf input (append input tempStack))
                                                    (setf tempStack '())
                                                    (setf input (reverse input))
                                                    (setf returnValue (parserList input returnValue expNumber))
                                                )
                                            )
                                        )
                                        (setf syntaxError t)
                                    )
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
            )
        )
    )
)

;---------OTHERS---------
(defun keywordSET (input returnValue)
    (if (null input)
        (setf returnValue t)
        (progn
            (if (not (equal (member (nth 0 input) alphabet) nil))
                (progn
                    (let ((var (toList input 0 '())) (integer1) (tempKeyword))
                        (setf input (goSpace input))
                        (if (char= #\Space (nth 0 input))
                            (progn
                                (setf input (cdr input))
                                (if (not (equal (member (nth 0 input) integers) nil))
                                    (progn
                                        (setf integer1 (toListForIntegers input 0 0))
                                        (setf input (goSpace input))
                                        (if (or (char= #\Space (nth 0 input)) (char= (code-char 41.) (nth 0 input)))
                                            (setf returnValue (integerListToInteger integer1 0))
                                            (setf syntaxError t)
                                        )
                                    )
                                    (progn
                                        (if (char= (code-char 40.) (nth 0 input))
                                            (progn
                                                (if (not (equal (member (nth 1 input) alphabet) nil))
                                                    (progn
                                                        (setf tempKeyword (toList input 1 '()))
                                                        (if (inTheList tempKeyword listOperatorKey)
                                                            (progn
                                                                (setf input (reverse input))
                                                                (setf input (cdr input))
                                                                (if (= (findIndex tempKeyword listOperatorKey) 0)
                                                                    (setf returnValue (parserList input '() 0))
                                                                    (setf returnValue (parserList input '() 2))
                                                                )
                                                            )
                                                            (setf syntaxError t)
                                                        )
                                                    )
                                                )
                                            )
                                            (progn
                                                (if (and (char= #\' (nth 0 input)) (char= (code-char 40.) (nth 1 input)))
                                                    (progn
                                                        (setf returnValue (operatorList (cdr (cdr input)) '()))
                                                    )
                                                    (setf syntaxError t)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun keywordDEFFUN (input returnValue)
    (if (char/= (nth 0 input) (code-char 41.))
            (keywordDEFFUN (cdr input) returnValue)
        (progn
            (setf input (cdr input))
            (setf input (reverse input))
            (if (char= (nth 0 input) (code-char 41.))
                (progn 
                    (setf input (cdr input))
                    (lexer (reverse input))
                    (setf returnValue tokens)
                    (dolist (n tokens)
                        (if (string= "SYNTAX ERROR" n)
                            (setf syntaxError t)
                        )
                    )
                    (if (equal syntaxError nil)
                        (setf returnValue "SYNTAX OK.")
                    )
                )
                (setf syntaxError t)
            )
        )
    )
)

(defun keywordLOAD (input returnValue)
    (if (null input)
        (setf returnValue t)
        (progn
            (if (char= (nth 0 input) #\")
                (progn
                    (let ((file (toList input 0 '())))
                        (setf file (cdr file))
                        (setf file (reverse file))
                        (if (char= (nth 0 file) #\")
                            (progn
                                (setf file (cdr file))
                                (setf file (reverse file))
                                (setf file (concatenate 'string file))
                                (setf returnValue file)
                            )
                            (setf syntaxError t)
                        )
                    )
                )
            )
        )
    )
)


;satirin gonderildigi ve islemlerin basladigi ilk parser
(defun parser (line)
    (let ((returnValue))
        (if (not (null line))
            (progn
                (if (char= (nth 0 line) #\;)
                    (progn
                        (if (char= (nth 1 line) #\;)
                            (print "COMMENT")
                            (setf syntaxError t)
                        )
                    )
                    (progn
                        (if (controlSyntaxForParanthesis line)
                            (progn
                                (if (char= (nth 0 line) #\')
                                    (progn
                                        (if (char= (nth 1 line) (code-char 40.))
                                            (setf returnValue (operatorList (cdr (cdr line)) '()))
                                            (setf syntaxError t)
                                        )
                                    )
                                    (progn
                                        (if (char= (nth 0 line) (code-char 40.))
                                            (progn
                                                (if (not (equal (member (nth 1 line) alphabet) nil))
                                                    (progn
                                                        (let ((word (toList line 1 '())))
                                                            (if (inTheList word keywords)
                                                                (progn
                                                                    (if (or (= (findIndex word keywords) 6) 
                                                                            (= (findIndex word keywords) 7)
                                                                            (= (findIndex word keywords) 8)
                                                                            (= (findIndex word keywords) 9)
                                                                            (= (findIndex word keywords) 10)
                                                                            (= (findIndex word keywords) 13))
                                                                        (progn
                                                                            (if (= (findIndex word keywords) 6)
                                                                                (progn
                                                                                    (setf inputLine (reverse line))
                                                                                    (setf returnValue (parserList inputLine returnValue 0))
                                                                                )
                                                                            )
                                                                            (if (= (findIndex word keywords) 7)
                                                                                (progn
                                                                                    (setf inputLine (reverse line))
                                                                                    (setf returnValue (parserList inputLine returnValue 2))
                                                                                )
                                                                            )
                                                                            (if (= (findIndex word keywords) 8)
                                                                                (progn
                                                                                    (setf inputLine (reverse line))
                                                                                    (setf returnValue (parserList inputLine returnValue 2))
                                                                                )
                                                                            )
                                                                            (if (= (findIndex word keywords) 9)
                                                                                (progn
                                                                                    (setf line (goSpace line))
                                                                                    (setf returnValue (keywordSET (cdr line) returnValue))
                                                                                )
                                                                            )
                                                                            (if (= (findIndex word keywords) 10)
                                                                                (setf returnValue (keywordDEFFUN (cdr line) returnValue))
                                                                            )
                                                                            (if (= (findIndex word keywords) 13)
                                                                                (progn
                                                                                    (setf line (goSpace line))
                                                                                    (setf returnValue (keywordLOAD (cdr line) returnValue))
                                                                                )
                                                                            )
                                                                        )
                                                                        (progn
                                                                            (if (not (or (= (findIndex word keywords) 0)
                                                                                    (= (findIndex word keywords) 1)
                                                                                    (= (findIndex word keywords) 2)
                                                                                    (= (findIndex word keywords) 3)
                                                                                    (= (findIndex word keywords) 4)
                                                                                    (= (findIndex word keywords) 5)
                                                                                ))
                                                                                (progn 
                                                                                    (if (or (= (findIndex word keywords) 11)
                                                                                            (= (findIndex word keywords) 12)
                                                                                            (= (findIndex word keywords) 16))
                                                                                        (progn
                                                                                            (setf inputLine (reverse line))
                                                                                            (setf returnValue (parserControl inputLine returnValue 0 '() '()))
                                                                                        )
                                                                                        (setf syntaxError t)
                                                                                    )
                                                                                )
                                                                                (progn
                                                                                    (setf inputLine (reverse line))
                                                                                    (setf returnValue (parserBoolean inputLine returnValue))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                (progn
                                                                    (if (inTheList word funcNames)
                                                                        (progn
                                                                            (print "func")
                                                                        )
                                                                        (setf syntaxError t)
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                    (progn
                                                        (if (not (equal (member (nth 1 line) operators) nil))
                                                            (progn
                                                                (setf inputLine (reverse line))
                                                                (setf returnValue (parserOperators inputLine returnValue))
                                                            )
                                                            (setf syntaxError t)
                                                        )
                                                    )
                                                )
                                            )
                                            (progn
                                                (if (or (char= (nth 0 line) #\Space) (char= (nth 0 line) #\newline))
                                                    (setf returnValue nil)
                                                    (setf syntaxError t)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (setf syntaxError t)
                        )
                    )
                )
            )
            (setf syntaxError t)
        )
        (if (equal syntaxError nil)
            (progn
                (print returnValue)
                (terpri)
            )
            (progn
                (print "SYNTAX_ERROR Expression not recognized")
                (terpri)
            )
        )
        (setf syntaxError nil)
    )
)

;dosyadan satir okuyarak islemlerine devam eder
(defun gppinterpreter (filename)
	(let ((f (open filename :if-does-not-exist nil)))
		(let* ((line '()))
            (when f
                (loop for ch = (read-char f nil)
                while ch do
                    (cond 
                        ((char= ch #\newline)
                            (cond 
                            ((not (equal line nil))
                                (parser line)
                            )
                            )
                            (setf line '())
                        )
                        (t (setf line (append line (list ch))))
                    )
                )
                (close f)
            )
        (parser line) ;isleme girmeyen son satiri islemek icin
         ;(return-from gppinterpreter tokens)
        )
	)
)

;terminalden satir okuyarak islemlerine devam eder
(defun gppinterpreter1 ()
   (let ((line "") (lineList '()))
      (loop
         (setf line (string-downcase (string (read-line))))
         (setf lineList '())
         (setf lineList (append lineList (stringToCharList line lineList 0)))
         (when (string= line "(exit)")
            (return)
         )
         (parser lineList)
      )
   )
)

(defun interpreter ()
   (let ((firstLine (string-downcase (string (read-line)))))
      (if (string= firstLine "$ g++")
        (gppinterpreter1)
        (progn
            (let ((line (stringToCharList firstLine '() 0)))
                (if (isEqualWithIndex line '(#\$ #\Space #\g #\+ #\+) 5)
                    (gppinterpreter (subseq firstLine 6))
                    (print "Syntax Error")
                )
            )
        )
      )
   )
)

(interpreter)