(defun reader (filename)
    (let ((numbers '()) (temp '()) (size 0) (numSize 0))
        (setf line (nth 0 (read-file-as-lines filename)))
        (dotimes (i (length line))
            (if (char= (char line i) #\Space)
                (progn
                    (if (= numSize 4)
                        (progn
                            (setf numbers (append numbers (list (listToInt temp size))))
                            (setf size 0)
                            (setf temp '())
                            (setf numSize 5)
                            (return)
                        )
                        (progn
                            (setf numbers (append numbers (list (listToInt temp size))))
                            (setf size 0)
                            (setf temp '())
                            (setf numSize (+ 1 numSize))
                        )
                    )
                )
                (progn
                    (setf temp (append temp (list (char line i))))
                    (setf size (+ size 1))
                )
            )
        )
        (if (> 5 numSize)
            (setf numbers (append numbers (list (listToInt temp size))))
        )
        (writeFile numbers)
    )
)

(defun listToInt(lst size)
    (let ((result 0))
        (dolist (i lst)
            (setf size (- size 1))
            (setf result (+ result (* (c2i i) (expt 10 size))))
        )
        result
    )
)

(defun read-file-as-lines (filename)
    (with-open-file (in filename)
        (loop for line = (read-line in nil nil)
            while line
                collect line)
    )
)

(defun c2i (x)
    (- (char-int x) (char-int #\0))
)

(defun writeFile(numbers)
    (with-open-file(stream "collatz_outputs.txt" :direction :output )
        (dolist (i numbers)
            (let ((collatzList '()) (str nil))
                (setf collatzList (findCollatzSquence i collatzList))
                (writeString collatzList stream)
            )
        )
    )
)

(defun writeString(lst stream)
    (let ((str (write-to-string (nth 0 lst))))
        (setf str (concatenate 'string str ":"))
        (dolist (i lst)
            (setf str (concatenate 'string str (write-to-string i) " "))
        )
        (format stream str)
        (terpri stream)
    )
)

(defun findCollatzSquence(number lst)
    (if (= number 1)
        (setf lst (append lst (list 1)))
        (progn
            (if (= 0 (mod number 2))
                (findCollatzSquence (/ number 2) (append lst (list number)))
                (findCollatzSquence (+ 1 (* 3 number)) (append lst (list number)))
            )
        )
    )
)

(reader "integer_inputs.txt")