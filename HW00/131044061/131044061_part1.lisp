(defun fixString (str)
	(let ((j (code-char 65)) (newStr '())(i nil))
		(dotimes (n (length str))
			(setf i (nth n str))
			(if (char= i #\space)
				(progn
					(if (char= j #\Space)
						(setf j i)
						(progn
							(setf j i)
							(setf newStr (append newStr (list i)))
						)
					)
				)
				(progn
					(if (char= i #\Newline)
						(setf newStr (append newStr (list (code-char 41))))
					)
					(setf j i)
					(setf newStr (append newStr (list i)))
				)
			)
		)
		(if (char= (nth (-(length newStr) 1) newStr) #\Space)
			(progn
				(setf newStr (reverse newStr))
				(setf newStr (cdr newStr))
				(setf newStr (reverse newStr))
			)
		)
		newStr
	)
)

(defun read-file-as-lines (filename)
	(with-open-file (in filename)
		(loop for line = (read-line in nil nil)
			while line
				collect line)
	)
)

(defun flattener (filename outputFilename)
    (let ((f (open filename :if-does-not-exist nil)))
    	(with-open-file (stream outputFilename :direction :output )
	        (let* ((lines '()) (index nil) (tempChar nil) (l '()) (str nil))
	            (setf lines (read-file-as-lines filename))
	            (close f)
	            (loop for line in lines
	                do (progn
		                    (dotimes (i (length line))
								(setf tempChar (char line i))
								(cond
									((char= tempChar (code-char 41))
										(setf l (append l (list #\Space)))
									)
									((char= tempChar (code-char 40))
									    (setf l (append l (list #\Space)))
									)
									(t (setf l (append l (list tempChar))))
								)
		                    )
		                    (setf l (fixString l))
							(setf str (concatenate 'string "(" l ")"))
							(format stream str)
							(terpri stream)
							(setf l '())
	                	)
	            )
	        )
	    )
	)
)

(flattener "nested_list.txt" "flattened_list")